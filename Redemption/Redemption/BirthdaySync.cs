using Microsoft.Exchange.WebServices.Data;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Redemption
{
    class AppointmentSync
    {
        ExchangeService service = null;

        String SMTPAdresse;
        String ContactFolderName;

        public AppointmentSync(ExchangeService _service, string _SMTPAdresse, string _ContactFolderName = "Arges Intern")
        {
            SMTPAdresse = _SMTPAdresse;
            ContactFolderName = _ContactFolderName;
            service = _service;
        }

        public void runDelete()
        {
            var mailboxBirthdays = getMailboxAppointments(0, true);
            var mailboxAnniversary = getMailboxAppointments(1, true);
        }

        public void runBirthdaySync ()
        {
            var mailboxBirthdays = getMailboxAppointments(0);
            addAppointment(mailboxBirthdays, 0);
        }

        public void runAnniversarySync()
        {
            var mailboxAnniversary = getMailboxAppointments(1);
            addAppointment(mailboxAnniversary, 1);
        }


        List<string> getMailboxAppointments(int BirthdayOrAnniversary, bool delete = false) // 0 => Geburtstag  1 => Jahrestag
        {
            // Initialize values for the start and end times, and the number of appointments to retrieve.
            DateTime startDate = DateTime.Now;
            var yearStr = startDate.AddYears(2);
            var yearStr2 = "01/01/" + yearStr.Year.ToString();
            DateTime endDate = DateTime.ParseExact(yearStr2, "MM/dd/yyyy", CultureInfo.InvariantCulture);
            // Initialize the calendar folder object with only the folder ID. 
            CalendarFolder calendar = CalendarFolder.Bind(service, WellKnownFolderName.Calendar, new PropertySet());
            // Set the start and end time and number of appointments to retrieve.
            CalendarView cView = new CalendarView(startDate, endDate, 500);
            // Limit the properties returned to the appointment's subject, start time, and end time.
            cView.PropertySet = new PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End, AppointmentSchema.Categories);
            // Retrieve a collection of appointments by using the calendar view.
            //FindItemsResults<Appointment> appointments = calendar.FindAppointments(cView);

            //Erzeuge Array in dem die Geburtstage gespeichert werden für Prüfung
            //List<Appointment> mailboxAppointments = new List<Appointment>();
            List<string> mailboxAppointments = new List<string>();
            //Läuft über alle Kalendereinträge
            //foreach (Appointment a in appointments)
            //{
            //    string searchString;
            //    searchString = BirthdayOrAnniversary == 0 ? "Geburtstag von" : "Jahrestag von";

            //    //Prüft ob Kalendereintrag ein Geburtstag ist der durch dieses Skript erstellt wurde
            //    if (a.Subject.Contains(searchString) && a.Categories.Contains("autogenerated by Arges IT"))
            //    {
            //        if(delete) { a.Delete(DeleteMode.HardDelete); }
            //        //Fügt den Termin dem Prüfungsarray hinzu
            //        mailboxAppointments.Add(a.Subject);
            //    }
                
            //}


            FindItemsResults<Appointment> appointments;
            string searchString;
            searchString = BirthdayOrAnniversary == 0 ? "Geburtstag von" : "Jahrestag von";

            do
            {
                appointments = calendar.FindAppointments(cView);

                //Läuft über alle Kalendereinträge
                foreach (Appointment a in appointments)
                {
                    //Prüft ob Kalendereintrag ein Geburtstag ist der durch dieses Skript erstellt wurde
                    if (a.Subject.Contains(searchString) && a.Categories.Contains("autogenerated by Arges IT"))
                    {
                        if (delete) { a.Delete(DeleteMode.HardDelete); }
                        //Fügt den Termin dem Prüfungsarray hinzu
                        mailboxAppointments.Add(a.Subject);
                    }
                }

                cView.StartDate = appointments.Items[appointments.Items.Count - 1].Start;
            } while (appointments.MoreAvailable);

            return mailboxAppointments;
        }

        public void deleteName(string name) 
        {
            // Initialize values for the start and end times, and the number of appointments to retrieve.
            DateTime startDate = DateTime.Now;
            var yearStr = startDate.AddYears(1);
            var yearStr2 = "12/31/" + yearStr.Year.ToString();
            DateTime endDate = DateTime.ParseExact(yearStr2, "MM/dd/yyyy", CultureInfo.InvariantCulture);
            // Initialize the calendar folder object with only the folder ID. 
            CalendarFolder calendar = CalendarFolder.Bind(service, WellKnownFolderName.Calendar, new PropertySet());
            // Set the start and end time and number of appointments to retrieve.
            CalendarView cView = new CalendarView(startDate, endDate, 500);
            // Limit the properties returned to the appointment's subject, start time, and end time.
            cView.PropertySet = new PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End, AppointmentSchema.Categories);
            // Retrieve a collection of appointments by using the calendar view.
            //FindItemsResults<Appointment> appointments = calendar.FindAppointments(cView);

            //Läuft über alle Kalendereinträge
            FindItemsResults<Appointment> appointments;
            var total = 0;
            do
            {
                appointments = calendar.FindAppointments(cView);

                //Läuft über alle Kalendereinträge
                foreach (Appointment a in appointments)
                {
                    if (a.Categories.Contains("autogenerated by Arges IT") && (a.Subject.Contains("Geburtstag von " + name) || a.Subject.Contains("Jahrestag von " + name)))
                    {
                        a.Delete(DeleteMode.HardDelete);
                    }
                }

                cView.StartDate = appointments.Items[appointments.Items.Count - 1].Start;
                total += appointments.Items.Count;
            } while (appointments.MoreAvailable);

            //ExchangeSync.writeLog(SMTPAdresse + " - Geburtstage und Jahrestage von " + name + " wegen löschung in PublicFolder gelöscht");
        }

        public void deleteWithCategorie(string cat)
        {
            // Initialize values for the start and end times, and the number of appointments to retrieve.
            DateTime startDate = DateTime.Now;
            DateTime endDate = startDate.AddYears(2);
            // Initialize the calendar folder object with only the folder ID. 
            CalendarFolder calendar = CalendarFolder.Bind(service, WellKnownFolderName.Calendar, new PropertySet());
            // Set the start and end time and number of appointments to retrieve.
            CalendarView cView = new CalendarView(startDate, endDate, 500);
            // Limit the properties returned to the appointment's subject, start time, and end time.
            cView.PropertySet = new PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End, AppointmentSchema.Categories);

            FindItemsResults<Appointment> appointments;
            var total = 0;
            var tDel = 0;
            do
            {
                appointments = calendar.FindAppointments(cView);

                //Läuft über alle Kalendereinträge
                foreach (Appointment a in appointments)
                {
                    //Prüft ob Kalendereintrag ein Categorie enthält
                    if (a.Categories.Contains(cat + " - Arges Intern") || a.Categories.Contains(cat + " - Arges Kontakte"))
                    {
                        a.Delete(DeleteMode.HardDelete);
                        tDel++;
                    }
                }

                cView.StartDate = appointments.Items[appointments.Items.Count - 1].Start;
                total += appointments.Items.Count;
            } while (appointments.MoreAvailable);
            ExchangeSync.writeLog(SMTPAdresse + " - " + total + " Termine gefunder, " + tDel + " mit Kategorie \"" + cat + "\" gefunden");



            //int pageSize = 500;
            //int offset = 0;

            //ItemView _cView = new ItemView(pageSize + 1, offset);
            //FolderId _folderID = new FolderId(WellKnownFolderName.Calendar);
            //CalendarFolder _calendar = CalendarFolder.Bind(service, _folderID);

            //_cView.PropertySet = new PropertySet(AppointmentSchema.Subject, AppointmentSchema.Start, AppointmentSchema.End, AppointmentSchema.Categories);

            //var moreItems = true;
            //var index = 0;
            //while (moreItems)
            //{
            //    var result = _calendar.FindItems(_cView);
            //    moreItems = result.MoreAvailable;

            //    foreach (var item in result)
            //    {
            //        index++;
            //        Console.WriteLine(index + " - " + item.Subject);
            //        if (item.Categories.Contains(cat + " - Arges Intern") || item.Categories.Contains(cat + " - Arges Kontakte"))
            //        {
            //            item.Delete(DeleteMode.HardDelete);

            //        }
            //    }

            //    if (moreItems)
            //    {
            //        _cView.Offset += pageSize;
            //    }
            //}

        }

        Folder getPublicFolder()
        {
            var PublicRoot = Folder.Bind(service, WellKnownFolderName.PublicFoldersRoot);
            SearchFilter.IsEqualTo filter = new SearchFilter.IsEqualTo(FolderSchema.DisplayName, ContactFolderName);
            FindFoldersResults FindPublicContactFolder = service.FindFolders(PublicRoot.Id, filter, new FolderView(1));
            return FindPublicContactFolder.Folders[0];
        }

        void addAppointment(List<string> mailboxList, int BirthdayOrAnniversary) // 0 => Geburtstag  1 => Jahrestag
        {
            var PublicRoot = Folder.Bind(service, WellKnownFolderName.PublicFoldersRoot);
            SearchFilter.IsEqualTo filter = new SearchFilter.IsEqualTo(FolderSchema.DisplayName, ContactFolderName);
            FindFoldersResults FindPublicContactFolder = service.FindFolders(PublicRoot.Id, filter, new FolderView(1));
            var ContactFolder = FindPublicContactFolder.Folders[0];

            ItemView view = new ItemView(int.MaxValue);
            FindItemsResults<Item> findResults;

            var count = 0;
            do
            {
                findResults = service.FindItems(ContactFolder.Id, view);

                foreach (Item item in findResults.Items)
                {
                    //Prüft ob Birthday / Jahrestag ungleich NULL ist (zb bei Kontakt Meetingraum)
                    DateTime BirthDayValue = new DateTime();
                    bool check = BirthdayOrAnniversary == 0 ? check = item.TryGetProperty(ContactSchema.Birthday, out BirthDayValue) : check = item.TryGetProperty(ContactSchema.WeddingAnniversary, out BirthDayValue);

                    if (check)
                    {
                        //Berechne Geburtsdatum und Alter
                        int age = DateTime.Now.Year - BirthDayValue.Year;
                        BirthDayValue = BirthDayValue.AddYears(age);
                        //if (DateTime.Now.CompareTo(BirthDayValue) < 0) { age--; }


                        // #### DIESES JAHR

                        // Erstelle Appointment Objekt
                        Appointment appo = new Appointment(service);

                        //Setze Appointment Eigenschaften
                        appo.Subject = BirthdayOrAnniversary == 0 ? age + ". Geburtstag von " + item.Subject : age + ". Jahrestag von " + item.Subject;
                        appo.Start = BirthDayValue;
                        appo.End = appo.Start.AddHours(1);
                        appo.IsAllDayEvent = true;
                        appo.IsReminderSet = false;
                        appo.LegacyFreeBusyStatus = 0;

                        // Setze Categorie an der Objekte erkannt werden, die hier mit diesem Script erstellt worden sind
                        appo.Categories.Add("autogenerated by Arges IT");

                        // Prüft ob Appointment schon vorhanden ist
                        var match = mailboxList.FirstOrDefault(stringToCheck => stringToCheck.Contains(appo.Subject));
                        if (match == null && appo.Start >= DateTime.Now)
                        {
                            count++;
                            appo.Save();
                        }

                        // #### NÄCHSTES JAHR

                        // Erstelle Appointment Objekt
                        appo = new Appointment(service);

                        //Setze Appointment Eigenschaften
                        appo.Subject = BirthdayOrAnniversary == 0 ? age+1 + ". Geburtstag von " + item.Subject : age+1 + ". Jahrestag von " + item.Subject;
                        appo.Start = BirthDayValue.AddYears(1);
                        appo.End = appo.Start.AddHours(1);
                        appo.IsAllDayEvent = true;
                        appo.IsReminderSet = false;
                        appo.LegacyFreeBusyStatus = 0;

                        // Setze Categorie an der Objekte erkannt werden, die hier mit diesem Script erstellt worden sind
                        appo.Categories.Add("autogenerated by Arges IT");

                        // Prüft ob Appointment schon vorhanden ist
                        match = mailboxList.FirstOrDefault(stringToCheck => stringToCheck.Contains(appo.Subject));
                        if (match == null && appo.Start >= DateTime.Now)
                        {
                            count++;
                            appo.Save();
                        }
                    }
                }

                view.Offset += findResults.Items.Count;
            } while (findResults.MoreAvailable == true);

            var e = BirthdayOrAnniversary == 0 ? " Geburtstage" : " Jahrestag";
            if (count > 0)
            {
                ExchangeSync.writeLog(SMTPAdresse + " - " + count + e + " hinzugefügt");
            }
            else
            {
                ExchangeSync.writeLog(SMTPAdresse + " - Keine" + e + " hinzugefügt");
            }
            
        }
    }
}
